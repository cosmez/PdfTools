@page "/splitPDF"


@using CommunityToolkit.Maui.Storage
@using UglyToad.PdfPig
@using PdfTools.IO
@using PdfTools.Data


@*Give some design/style to the form*@

<div>
    <div class ="row">
        <div class="col-md-10 mb-2">
            <label for="pdfFile"><strong>PDF File:</strong></label>
            <input id="pdfFile" type="text" @bind-value="filePath" class="form-control" readonly />
        </div>
        <div class="col-md-2 mb-2 d-flex flex-column">
            <button @onclick="HandleFilePicker" class="btn btn-primary mt-auto">
                Select PDF
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-md-10 mb-2">
            <label for="folderPath"><strong>Output Location:</strong></label>
            <input id="folderPath" type="text" @bind-value="folderPath" class="form-control" readonly />
        </div>
        <div class="col-md-2 mb-2 d-flex flex-column">
            <button @onclick="HandleFolderPicker" class="btn btn-primary mt-auto">
                Select Location
            </button>
        </div>
    </div>


    <br />

    <div class="row">
        <div div class="col-md-9 mb-2">
            <div class="mb-1">
                <input id="bookmarks" type="checkbox" checked="@isBookmarksChecked" @onchange="BookMarksChange" />
                <label for="bookmarks"><strong>Use Bookmarks</strong></label>
            </div>

            <div class="mb-1">
                <input id="OCRSheet" type="checkbox" checked="@isOCRChecked" @onchange="OCRCheckChange" />
                <label for="OCRSheet"><strong>OCR Sheet No</strong></label>
            </div>

            <div class="mb-1">
                <input id="CreateFolders" type="checkbox" checked="@isCreateFoldersChecked" @onchange="CreateFolderCheckChange" />
                <label for="CreateFolders"><strong>Create Folders (Experimental)</strong></label>
            </div>
        </div>

        <div div class="col-md-3 mb-2">
            <div class="row">
                <div div class="col-md-6 mb-2 d-flex flex-column">
                    <button class="btn btn-primary mt-auto" @onclick="ProcessButtonClick">Process</button>
                </div>

                <div div class="col-md-6 mb-2 d-flex flex-column">
                    <button class="btn btn-primary mt-auto" @onclick="SplitButtonClick">Split</button>
                </div>
            </div>
        </div>
    </div>


    <div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Order</th>
                    <th>Page</th>
                    <th>Level</th>
                    <th>Reorder</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pdf in GetItemsOnCurrentPage())
                {
                    <tr>
                        <td><input type="text" class="form-control" @bind="pdf.Name" /></td>  @*This one will be editable*@
                        <td>@pdf.Order</td> @* It will have order arrows *@
                        <td>@pdf.Page</td>
                        <td>@pdf.Level</td>
                        <td>
                            <button @onclick="() => MoveUp(pdf)"><i class="fas fa-arrow-up"></i></button>
                            <button @onclick="() => MoveDown(pdf)"><i class="fas fa-arrow-down"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="progress" style="display: @(ProgressVisible ? "block" : "none")">
            <div class="progress-bar progress-bar-striped progress-bar-animated active" role="progressbar" style="width: var(--blazor-load-percentage, @ProgressPercentage%)" aria-valuenow="@ProgressPercentage" aria-valuemin="0" aria-valuemax="100">@ProgressText</div>
        </div>

        <br />
        <!-- Pagination controls -->
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" style="cursor: pointer;" tabindex="-1" @onclick="PreviousPage">Previous</a>
                </li>
                <li class="page-item disabled">
                    <span class="page-link">Page @currentPage of @totalPages</span>
                </li>
                <li class="page-item @(GetItemsOnCurrentPage().Count < itemsPerPage ? "disabled" : "")">
                    <a class="page-link" style="cursor: pointer;" @onclick="NextPage">Next</a>
                </li>
            </ul>
        </nav>
        
    </div>

    
</div>



@code{

    string filePath = "";
    string folderPath = "";
    bool isBookmarksChecked = true;
    bool isOCRChecked = true;
    bool isCreateFoldersChecked = false;

    List<SplitData> PDFSplit = new List<SplitData>();

    private IProgress<PdfDumpProgress> PdfProgress;


    private int currentPage = 1;
    private int totalPages = 1;
    private int itemsPerPage = 10;



    private double ProgressPercentage = 0;
    private string ProgressText = "";
    private bool ProgressVisible = false;


    protected override async Task OnInitializedAsync()
    {
        PdfProgress = new Progress<PdfDumpProgress>(ReportPdfProcessingProgress);
    }






    private void ReportPdfProcessingProgress(PdfDumpProgress progress)
    {
        double percentage = (double)progress.Page / progress.Total * 100;
        ProgressPercentage = percentage;
        ProgressText = $"Processing Page {progress.Page}/{progress.Total} ({percentage}% complete)";

        System.Diagnostics.Debug.WriteLine(ProgressText);

       ProgressVisible = percentage > 0 && percentage < 100;


        StateHasChanged();
    }







    private List<SplitData> GetItemsOnCurrentPage()
    {
        int startIndex = (currentPage - 1) * itemsPerPage;
        return PDFSplit.Skip(startIndex).Take(itemsPerPage).ToList();
    }


    private async Task HandleFilePicker()
    {
        var file = await FilePicker.PickAsync(new PickOptions
            {
                FileTypes = FilePickerFileType.Pdf
            });

        if(file != null){
            filePath = file.FullPath;
        }
    }


    private async Task HandleFolderPicker()
    {

        var folder = await FolderPicker.PickAsync(default);
        if (folder != null)
        {
            folderPath = folder.Folder.Path;
        }
    }


    private void BookMarksChange(ChangeEventArgs e)
    {
        isBookmarksChecked = Convert.ToBoolean(e.Value);
    }


    private void OCRCheckChange(ChangeEventArgs e)
    {
        isOCRChecked = Convert.ToBoolean(e.Value);
    }


    private void CreateFolderCheckChange(ChangeEventArgs e)
    {
        isCreateFoldersChecked = Convert.ToBoolean(e.Value);
    }


    private async void ProcessButtonClick()
    {
        if (!string.IsNullOrWhiteSpace(filePath) && !string.IsNullOrWhiteSpace(folderPath))
        {
            PDFSplit.Clear();

            var dumpData = await Pdf.GetPdfDump(filePath, false, PdfProgress);


            var pdf = PdfDocument.Open(filePath);

            foreach (var page in pdf.GetPages())
            {
                var bookmarks = dumpData.Bookmarks.Where(bk => bk.PageNumber == page.Number).ToList();

                string name = string.Empty; 

                bool nameFound = false;

                if (bookmarks.Count > 0 && isBookmarksChecked)
                {
                    var bookmark = bookmarks.OrderByDescending(bk => bk.PageNumber).First();
                    name = Utils.EscapeFilename(bookmark.Name); 
                    var parsedName = CadNamingParser.Parse(bookmark.Name);
                    if (parsedName != null)
                    {
                        nameFound = true;
                    }

                }

                if (!nameFound && isOCRChecked)
                {
                    //try to grab the sheet number from the page
                        var words = Pdf.GetCornerWords(page); 
                        foreach (var word in words)
                        {
                            var parsedCode = CadNamingParser.Parse(word.Text);
                            if (parsedCode != null)
                            {
                                name = $"{parsedCode.Discipline}{parsedCode.SheetNumber} {name}";
                                nameFound = true;
                                break;
                            }
                        }
                }


                if (!nameFound && string.IsNullOrWhiteSpace(name))
                {
                    name = Utils.EscapeFilename(Path.GetFileNameWithoutExtension(filePath));
                }

                SplitData split = new SplitData()
                    {
                        Name = name,
                        Order = page.Number.ToString("D3"),
                        Page = page.Number.ToString()
                    };

                PDFSplit.Add(split);
            }

            if (PDFSplit.Any()){
                var pages = (float)PDFSplit.Count() / itemsPerPage;
                totalPages = (int)Math.Ceiling(pages);
                // PdfProgressReport(100, "Complete", totalPages);
            }
        }
    }


    private async Task SplitButtonClick()
    {
        // btnSplit.Enabled = false;
        // btnProcess.Enabled = false;

        //Split is working

        try
        {
            var nameDict = new Dictionary<int, string>();
            int numberOfPages = 0;
            for (int i = 0; i < PDFSplit.Count; i++)
            {
                var item = PDFSplit[i];
                string name = item.Name;
                string sPage = item.Page;
                if (int.TryParse(sPage, out int page) && !nameDict.ContainsKey(page))
                {
                    nameDict.Add(page, name);
                    if (page > numberOfPages) numberOfPages = page;
                }
            }

            Split.SplitPdf(filePath, folderPath, nameDict);

        }
        catch (Exception ex)
        {
            //Create a custom dialog or check for dialog UI
            // MessageBox.Show($"Error splitting {ex.Message}, trying to rollback");
        }


        // // btnSplit.Enabled = true;
        // // btnProcess.Enabled = true;
    }


    private void MoveUp(SplitData item)
    {
        int index = PDFSplit.IndexOf(item);
        if (index > 0)
        {
            PDFSplit.RemoveAt(index);
            PDFSplit.Insert(index - 1, item);

            PDFSplit[index].Page = (index + 1).ToString();
            PDFSplit[index].Order = (index + 1).ToString("D3");

            PDFSplit[index - 1].Page = index.ToString();
            PDFSplit[index - 1].Order = index.ToString("D3");

        }
    }

    private void MoveDown(SplitData item)
    {
        int index = PDFSplit.IndexOf(item);
        if (index < PDFSplit.Count - 1)
        {
            PDFSplit.RemoveAt(index);
            PDFSplit.Insert(index + 1, item);

            PDFSplit[index].Page = (index + 1).ToString();
            PDFSplit[index].Order = (index + 1).ToString("D3");

            PDFSplit[index + 1].Page = (index + 2).ToString();
            PDFSplit[index + 1].Order = (index + 2).ToString("D3");
        }
    }


    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (GetItemsOnCurrentPage().Count == itemsPerPage)
        {
            currentPage++;
        }
    }

    private void PdfProgressReport(int page, string filename, int totalPercentage)
    {
        PdfProgress.Report(new PdfDumpProgress()
            {
                Page = page,
                Filename = filename,
                Total = totalPercentage
            });
    }

}