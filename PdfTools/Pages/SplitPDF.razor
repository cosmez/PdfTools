@page "/splitPDF"


@using CommunityToolkit.Maui.Storage
@using UglyToad.PdfPig
@using PdfTools.IO
@using PdfTools.Data


@*Give some design/style to the form*@

<div>
    <div>
        <label>PDF File:</label>
        <input type="text" @bind-value="filePath" class="form-control" readonly />
        <button @onclick="HandleFilePicker">Select PDF</button>
    </div>

    <div>
        <label>Output Location:</label>
        <input type="text" @bind-value="folderPath" class="form-control" readonly />
        <button @onclick="HandleFolderPicker">Select Location</button>
    </div>

    <div>
        <input id="bookmarks" type="checkbox" checked="@isBookmarksChecked" @onchange="BookMarksChange" />
        <label for="bookmarks">Use Bookmarks</label>

        <input id="OCRSheet" type="checkbox" checked="@isOCRChecked" @onchange="OCRCheckChange" />
        <label for="OCRSheet">OCR Sheet No</label>

        <input id="CreateFolders" type="checkbox" checked="@isCreateFoldersChecked" @onchange="CreateFolderCheckChange" />
        <label for="CreateFolders">Create Folders (Experimental)</label>
        
        <button @onclick="ProcessButtonClick">Process</button>
        <button @onclick="SplitButtonClick">Split</button>
    </div>

    @*Change this grid, may be for a custom component or check for a ui design in maui toolkit*@
    <div>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Order</th>
                    <th>Page</th>
                    <th>Level</th>
                    <th>Reorder</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pdf in PDFSplit)
                {
                    <tr>
                        <td><input type="text" class="form-control" @bind="pdf.Name" /></td>  @*This one will be editable*@
                        <td>@pdf.Order</td> @* It will have order arrows *@
                        <td>@pdf.Page</td>
                        <td>@pdf.Level</td>
                        <td>
                            <button @onclick="() => MoveUp(pdf)"><i class="fas fa-arrow-up"></i></button>
                            <button @onclick="() => MoveDown(pdf)"><i class="fas fa-arrow-down"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>

    
</div>



@code{

    string filePath = "";
    string folderPath = "";
    bool isBookmarksChecked = true;
    bool isOCRChecked = true;
    bool isCreateFoldersChecked = false;

    List<SplitData> PDFSplit = new List<SplitData>();


    private async Task HandleFilePicker()
    {
        var file = await FilePicker.PickAsync(new PickOptions
            {
                FileTypes = FilePickerFileType.Pdf
            });

        if(file != null){
            filePath = file.FullPath;
        }
    }


    private async Task HandleFolderPicker()
    {

        var folder = await FolderPicker.PickAsync(default);
        if (folder != null)
        {
            folderPath = folder.Folder.Path;
        }
    }


    private void BookMarksChange(ChangeEventArgs e)
    {
        isBookmarksChecked = Convert.ToBoolean(e.Value);
    }


    private void OCRCheckChange(ChangeEventArgs e)
    {
        isOCRChecked = Convert.ToBoolean(e.Value);
    }


    private void CreateFolderCheckChange(ChangeEventArgs e)
    {
        isCreateFoldersChecked = Convert.ToBoolean(e.Value);
    }


    private void ProcessButtonClick()
    {
        if (!string.IsNullOrWhiteSpace(filePath) && !string.IsNullOrWhiteSpace(folderPath))
        {
            PDFSplit.Clear();

            var dumpData = Pdf.GetPdfDump(filePath); //PdfIo.PdfDumpData(txtPDFTK.Text, txtFilename.Text);
            var pdf = PdfDocument.Open(filePath);

            foreach (var page in pdf.GetPages())
            {
                var bookmarks = dumpData.Bookmarks.Where(bk => bk.PageNumber == page.Number).ToList();

                string name = string.Empty;

                bool nameFound = false;

                if (bookmarks.Count > 0 && isBookmarksChecked)
                {
                    var bookmark = bookmarks.OrderByDescending(bk => bk.Level).First();
                    name = bookmark.Name;//Utils.EscapeFilename(bookmark.Name); <--Doesn't exist in the current project
                                         // var parsedName = CadNamingParser.Parse(bookmark.Name); <--Doesn't exist in the current project
                                         // if (parsedName != null)
                                         // {
                                         //     nameFound = true;
                                         // }

                }

                if (!nameFound && isOCRChecked)
                {
                    //try to grab the sheet number from the page
                    //     var words = Pdf.GetCornerWords(page); <--Doesn't exist in the current project
                    //     foreach (var word in words)
                    //     {
                    //         var parsedCode = CadNamingParser.Parse(word.Text); <--Doesn't exist in the current project
                    //         if (parsedCode != null)
                    //         {
                    //             name = $"{parsedCode.Discipline}{parsedCode.SheetNumber} {name}";
                    //             nameFound = true;
                    //             break;
                    //         }
                    //     }
                }


                if (!nameFound && string.IsNullOrWhiteSpace(name))
                {
                    name = Path.GetFileNameWithoutExtension(filePath);//Utils.EscapeFilename(Path.GetFileNameWithoutExtension(filePath)); <--Doesn't exist in the current project
                }

                SplitData split = new SplitData()
                    {
                        Name = name,
                        Order = page.Number.ToString("D3"),
                        Page = page.Number.ToString()
                    };

                PDFSplit.Add(split);
            }
        }
    }


    private async Task SplitButtonClick()
    {
        // btnSplit.Enabled = false;
        // btnProcess.Enabled = false;

        //Split is working

        try
        {
            var nameDict = new Dictionary<int, string>();
            int numberOfPages = 0;
            for (int i = 0; i < PDFSplit.Count; i++)
            {
                var item = PDFSplit[i];
                string name = item.Name;
                string sPage = item.Page;
                if (int.TryParse(sPage, out int page) && !nameDict.ContainsKey(page))
                {
                    nameDict.Add(page, name);
                    if (page > numberOfPages) numberOfPages = page;
                }
            }

            Split.SplitPdf(filePath, folderPath, nameDict);

        }
        catch (Exception ex)
        {
            //Create a custom dialog or check for dialog UI
            // MessageBox.Show($"Error splitting {ex.Message}, trying to rollback");
        }


        // // btnSplit.Enabled = true;
        // // btnProcess.Enabled = true;
    }


    private void MoveUp(SplitData item)
    {
        int index = PDFSplit.IndexOf(item);
        if (index > 0)
        {
            PDFSplit.RemoveAt(index);
            PDFSplit.Insert(index - 1, item);

            PDFSplit[index].Page = (index + 1).ToString();
            PDFSplit[index].Order = (index + 1).ToString("D3");

            PDFSplit[index - 1].Page = index.ToString();
            PDFSplit[index - 1].Order = index.ToString("D3");

        }
    }

    private void MoveDown(SplitData item)
    {
        int index = PDFSplit.IndexOf(item);
        if (index < PDFSplit.Count - 1)
        {
            PDFSplit.RemoveAt(index);
            PDFSplit.Insert(index + 1, item);

            PDFSplit[index].Page = (index + 1).ToString();
            PDFSplit[index].Order = (index + 1).ToString("D3");

            PDFSplit[index + 1].Page = (index + 2).ToString();
            PDFSplit[index + 1].Order = (index + 2).ToString("D3");
        }
    }

}